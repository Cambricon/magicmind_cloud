diff --git a/eval.py b/eval.py
index ab963a2..dd79b74 100644
--- a/eval.py
+++ b/eval.py
@@ -19,7 +19,11 @@ from training.model_saver import ModelSaver
 from training.optimizer_scheduler import OptimizerScheduler
 from concern.config import Configurable, Config
 import time
-
+import sys
+sys.path.append("../../../../utils")
+from utils import Record
+sys.path.append("../../infer_python")
+from mm_infer import MM_Model
 def main():
     parser = argparse.ArgumentParser(description='Text Recognition Training')
     parser.add_argument('exp', type=str)
@@ -65,6 +69,8 @@ def main():
                         type=int, help='Use distributed training')
     parser.add_argument('-g', '--num_gpus', dest='num_gpus', default=1,
                         type=int, help='The number of accessible gpus')
+    parser.add_argument('--model_path', type=str, default = '../../data/models/dbnet_pt_model_force_float32_1_1280_800_model', help='model path')
+    parser.add_argument('--result_file', type=str,default="../data/output/result.txt", help='path to save result')
     parser.set_defaults(debug=False, verbose=False)
 
     args = parser.parse_args()
@@ -161,10 +167,7 @@ class Eval:
         
     def eval(self, visualize=False):
         self.init_torch_tensor()
-        model = self.init_model()
-        self.resume(model, self.model_path)
-        all_matircs = {}
-        model.eval()
+        mlu_model = MM_Model(self.args['model_path'])
         vis_images = dict()
         with torch.no_grad():
             for _, data_loader in self.data_loaders.items():
@@ -173,7 +176,7 @@ class Eval:
                     if self.args['test_speed']:
                         time_cost = self.report_speed(model, batch, times=50)
                         continue
-                    pred = model.forward(batch, training=False)
+                    pred = mlu_model.forward_db(batch['image'])
                     output = self.structure.representer.represent(batch, pred, is_output_polygon=self.args['polygon']) 
                     if not os.path.isdir(self.args['result_dir']):
                         os.mkdir(self.args['result_dir'])
@@ -186,8 +189,9 @@ class Eval:
                         self.logger.save_image_dict(vis_image)
                         vis_images.update(vis_image)
                 metrics = self.structure.measurer.gather_measure(raw_metrics, self.logger)
+                result = Record(self.args['result_file'])
                 for key, metric in metrics.items():
-                    self.logger.info('%s : %f (%d)' % (key, metric.avg, metric.count))
+                    result.write('%s : %f (%d)' % (key, metric.avg, metric.count), True)
 
 if __name__ == '__main__':
     main()
